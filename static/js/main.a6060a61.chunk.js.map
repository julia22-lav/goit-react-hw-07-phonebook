{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-types.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterChange","axios","defaults","baseURL","name","number","dispatch","actions","post","then","data","catch","error","contactId","delete","get","ContactForm","state","onChange","event","preventDefault","console","dir","currentTarget","value","currentState","upadateState","setState","onSubmit","props","reset","nameId","genId","telId","this","className","s","contactForm","htmlFor","labelForm","type","id","inputForm","buttonForm","Component","connect","contact","operations","ContactListItem","deleteContact","listItem","onClick","buttonListItem","ContactList","onLoad","contacts","map","getContactsToShow","filter","items","normalizedFilter","toLowerCase","includes","Filter","filterInputId","filterState","labelFilter","inputFilter","target","App","itemsReducer","createReducer","_","payload","find","alert","filterReducer","loading","contactsReducer","combineReducers","rootReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,YAAc,iCAAiC,UAAY,+BAA+B,UAAY,+BAA+B,WAAa,kC,mBCApKD,EAAOC,QAAU,CAAC,SAAW,kCAAkC,eAAiB,0C,mBCAhFD,EAAOC,QAAU,CAAC,YAAc,4BAA4B,YAAc,8B,mBCA1ED,EAAOC,QAAU,CAAC,YAAc,mC,0OC8B1BC,EAAuBC,YAAa,iCACpCC,EAAuBD,YAAa,iCACpCE,EAAqBF,YAAa,+BAczB,GACbG,kBAbwBH,YAAa,8BAcrCI,kBAbwBJ,YAAa,8BAcrCK,gBAbsBL,YAAa,4BAcnCM,qBAZ2BN,YAAa,iCAaxCO,qBAZ2BP,YAAa,iCAaxCQ,mBAZyBR,YAAa,+BAatCS,aAXmBT,YCvCL,yBDmDdD,uBACAE,uBACAC,sBEtDFQ,IAAMC,SAASC,QAAU,wBAEzB,I,IAyBe,EAhBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OAAsB,SAAAC,GACvCA,EAASC,EAAQb,qBACjBO,IACGO,KAAK,YAAa,CAAEJ,OAAMC,WAC1BI,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcJ,EAASC,EAAQZ,kBAAkBe,OACtDC,OAAM,SAAAC,GAAK,OAAIN,EAASC,EAAQX,gBAAgBgB,SAWtC,EARO,SAAAC,GAAS,OAAI,SAAAP,GACjCA,EAASC,EAAQV,wBACjBI,IACGa,OADH,oBACuBD,IACpBJ,MAAK,kBAAMH,EAASC,EAAQT,qBAAqBe,OACjDF,OAAM,SAAAC,GAAK,OAAIN,EAASC,EAAQR,mBAAmBa,SAGzC,EAzBO,kBAAM,SAAAN,GAC1BA,EAASC,EAAQjB,wBAEjBW,IACGc,IAAI,aACJN,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcJ,EAASC,EAAQf,qBAAqBkB,OACzDC,OAAM,SAAAC,GAAK,OAAIN,EAASC,EAAQd,mBAAmBmB,S,OCJlDI,E,4MACJC,MAAQ,CACNb,KAAM,GACNC,OAAQ,I,EAEVa,SAAW,SAAAC,GACTA,EAAMC,iBACNC,QAAQC,IAAIH,EAAMI,eAClB,MAAwBJ,EAAMI,cAAtBC,EAAR,EAAQA,MAAOpB,EAAf,EAAeA,KACTqB,EAAe,EAAKR,MACpBS,EAAY,eAAMtB,EAAOoB,GAC/B,EAAKG,SAAL,2BAAmBF,GAAiBC,K,EAGtCE,SAAW,SAAAT,GACTA,EAAMC,iBACN,EAAKS,MAAMD,SAAS,EAAKX,OACzB,EAAKa,S,EAGPA,MAAQ,WACN,EAAKH,SAAS,CACZvB,KAAM,GACNC,OAAQ,M,4CAIZ,WACE,IAAM0B,EAASC,cACTC,EAAQD,cACd,OACE,uBAAMJ,SAAUM,KAAKN,SAAUO,UAAWC,IAAEC,YAA5C,UACE,wBAAOC,QAASP,EAAQI,UAAWC,IAAEG,UAArC,iBAEE,uBACEC,KAAK,OACLpC,KAAK,OACLqC,GAAIV,EACJP,MAAOU,KAAKjB,MAAMb,KAClBc,SAAUgB,KAAKhB,SACfiB,UAAWC,IAAEM,eAIjB,wBAAOJ,QAASL,EAAOE,UAAWC,IAAEG,UAApC,gBAEE,uBACEC,KAAK,MACLpC,KAAK,SACLqC,GAAIR,EACJT,MAAOU,KAAKjB,MAAMZ,OAElBa,SAAUgB,KAAKhB,SACfiB,UAAWC,IAAEM,eAGjB,wBAAQF,KAAK,SAASL,UAAWC,IAAEO,WAAnC,gC,GAxDkBC,aAyEXC,cAAQ,MAJI,SAAAvC,GAAQ,MAAK,CACtCsB,SAAU,SAAAkB,GAAO,OAAIxC,EAASyC,EAAsBD,QAGvCD,CAAkC7B,G,iBCnDlCgC,E,4JAxBb,WACE,MAA4Cd,KAAKL,MAAzCY,EAAR,EAAQA,GAAIrC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,OAAQ4C,EAA1B,EAA0BA,cAC1B,OACE,qBAAIR,GAAIA,EAAIN,UAAWC,IAAEc,SAAzB,UACG9C,EADH,IACUC,EACR,wBACE8C,QAAS,WACPF,EAAcR,IAEhBN,UAAWC,IAAEgB,eAJf,2B,GANsBR,a,iBCGxBS,E,uKACJ,WACEnB,KAAKL,MAAMyB,W,oBAGb,WACE,MAAoCpB,KAAKL,MAAjC0B,EAAR,EAAQA,SAAUN,EAAlB,EAAkBA,cAElB,OACE,6BACGM,EAASC,KAAI,YAA2B,IAAxBpD,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,OAAQoC,EAAS,EAATA,GAC7B,OACE,cAAC,EAAD,CACErC,KAAMA,EACNC,OAAQA,EAERoC,GAAIA,EACJQ,cAAeA,EACfd,UAAWC,IAAEiB,aAHRZ,Y,GAfOG,aA+BpBa,EAAoB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC7BC,EAAmBF,EAAOG,cAChC,OAAOF,EAAMD,QAAO,gBAAGtD,EAAH,EAAGA,KAAH,QAClBA,GAAOA,EAAKyD,cAAcC,SAASF,OAaxBf,eATS,SAAA5B,GAAK,MAAK,CAChCsC,SAAUE,EAAkBxC,EAAMsC,cAGT,SAAAjD,GAAQ,MAAK,CACtC2C,cAAe,SAAApC,GAAS,OAAIP,EAASyC,EAAyBlC,KAC9DyC,OAAQ,kBAAMhD,EAASyC,SAGVF,CAA6CQ,G,iBC/CtDU,E,4JACJ,WACE,IAAMC,EAAgBhC,cACtB,EAAsCE,KAAKL,MAAnCoC,EAAR,EAAQA,YAAajE,EAArB,EAAqBA,aAErB,OACE,wBAAOsC,QAAS0B,EAAe7B,UAAWC,IAAE8B,YAA5C,oCAEE,uBACE1B,KAAK,OACLpC,KAAK,SACLqC,GAAIuB,EACJxC,MAAOyC,EACP/C,SAAUlB,EACVmC,UAAWC,IAAE+B,qB,GAdFvB,aAkCNC,eARS,SAAA5B,GAAK,MAAK,CAChCgD,YAAahD,EAAMsC,SAASG,WAGH,SAAApD,GAAQ,MAAK,CACtCN,aAAc,SAAAmB,GAAK,OAAIb,EAASC,EAAQP,aAAamB,EAAMiD,OAAO5C,YAGrDqB,CAA6CkB,GCoC7CM,E,4JAbb,WACE,OACE,qCACE,2CACA,cAAC,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GAhEUzB,a,uBCDhBlD,EASEa,EATFb,kBACAC,EAQEY,EARFZ,kBACAC,EAOEW,EAPFX,gBACAC,EAMEU,EANFV,qBACAC,EAKES,EALFT,qBACAC,EAIEQ,EAJFR,mBAEAP,GAEEe,EAHFjB,qBAGEiB,EAFFf,sBAmBI8E,IAjBF/D,EADFd,mBAkBmB8E,YAAc,IAAD,mBAC/B/E,GAAuB,SAACgF,EAAD,YAAMC,WADE,cAE/B9E,GAAoB,SAACsB,EAAD,GAAyB,IAAfwD,EAAc,EAAdA,QAC7B,OAAIxD,EAAMyD,MAAK,SAAA5B,GAAO,OAAIA,EAAQ1C,OAASqE,EAAQrE,SACjDuE,MAAM,GAAD,OAAIF,EAAQrE,KAAZ,6BACEa,GAEH,GAAN,mBAAWA,GAAX,CAAkBwD,OAPY,cAS/B3E,GAAuB,SAACmB,EAAD,OAAUwD,EAAV,EAAUA,QAAV,OACtBxD,EAAMyC,QAAO,qBAAGjB,KAAgBgC,QAVF,KAsB5BG,GAAgBL,YAAc,GAAI,CACtC,wBAAyB,SAACC,EAAD,YAAMC,WAG3BI,GAAUN,aAAc,GAAD,mBAC1B7E,GAAoB,kBAAM,KADA,cAE1BC,GAAoB,kBAAM,KAFA,cAG1BC,GAAkB,kBAAM,KAHE,cAI1BC,GAAuB,kBAAM,KAJH,cAK1BC,GAAuB,kBAAM,KALH,cAM1BC,GAAqB,kBAAM,KAND,IAed+E,GANSC,YAAgB,CACtCpB,MAAOW,GACPZ,OAAQkB,GACRC,a,6BC/CIG,GAAcD,YAAgB,CAClCxB,SAAUuB,KASNG,GAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,KAAOC,KAAWC,KAAOC,KAASC,KAAOC,UAHhD,CAMdC,OAWaC,GATDC,YAAe,CAC3BC,QAASd,GACTC,cACAc,UAAUC,ICnCZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SAEE,cAAC,EAAD,QAIJQ,SAASC,eAAe,W","file":"static/js/main.a6060a61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__3aDZl\",\"labelForm\":\"ContactForm_labelForm__3xwda\",\"inputForm\":\"ContactForm_inputForm__sD-Bd\",\"buttonForm\":\"ContactForm_buttonForm__2hrCj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__1NTX9\",\"buttonListItem\":\"ContactListItem_buttonListItem__2ebam\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labelFilter\":\"Filter_labelFilter__34DqY\",\"inputFilter\":\"Filter_inputFilter__gj8FC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__Ld6TM\"};","import types from './contacts-types';\r\nimport { v4 as genId } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n// const addContact = ({ name, number, id }) => {\r\n//   return {\r\n//     type: types.AddContact,\r\n//     payload: { name, number, id: genId() },\r\n//   };\r\n// };\r\n\r\n// const addContact = createAction(types.AddContact, ({ name, number }) => {\r\n//   return { payload: { name, number, id: genId() } };\r\n// });\r\n\r\n// const deleteContact = contactId => {\r\n//   return {\r\n//     type: types.DeleteContact,\r\n//     payload: contactId,\r\n//   };\r\n// };\r\n\r\n// const deleteContact = createAction(types.DeleteContact);\r\n\r\n// const filterChange = value => {\r\n//   return {\r\n//     type: types.FilterChange,\r\n//     payload: value,\r\n//   };\r\n// };\r\n\r\nconst fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nconst fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nconst fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest');\r\nconst addContactSuccess = createAction('contacts/addContactSuccess');\r\nconst addContactError = createAction('contacts/addContactError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nconst filterChange = createAction(types.FilterChange);\r\n\r\n// export default { addContact, deleteContact, filterChange };\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  filterChange,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nexport default {\r\n  AddContact: 'contacts/AddContact',\r\n  DeleteContact: 'contacts/DeleteContact',\r\n  FilterChange: 'contacts/FilterChange',\r\n};\r\n","import axios from 'axios';\r\nimport actions from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4000';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(actions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(actions.fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  dispatch(actions.addContactRequest());\r\n  axios\r\n    .post('/contacts', { name, number })\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(actions.deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(actions.deleteContactError(error)));\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };\r\n","import { Component } from 'react';\r\nimport { v4 as genId } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/contacts/contacts-operations';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n  onChange = event => {\r\n    event.preventDefault();\r\n    console.dir(event.currentTarget);\r\n    const { value, name } = event.currentTarget;\r\n    const currentState = this.state;\r\n    const upadateState = { [name]: value };\r\n    this.setState({ ...currentState, ...upadateState });\r\n  };\r\n\r\n  onSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const nameId = genId();\r\n    const telId = genId();\r\n    return (\r\n      <form onSubmit={this.onSubmit} className={s.contactForm}>\r\n        <label htmlFor={nameId} className={s.labelForm}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            id={nameId}\r\n            value={this.state.name}\r\n            onChange={this.onChange}\r\n            className={s.inputForm}\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor={telId} className={s.labelForm}>\r\n          Tel\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            id={telId}\r\n            value={this.state.number}\r\n            // pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            onChange={this.onChange}\r\n            className={s.inputForm}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={s.buttonForm}>\r\n          Add Contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: contact => dispatch(operations.addContact(contact)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactListItem.module.css';\r\n\r\nclass ContactListItem extends Component {\r\n  render() {\r\n    const { id, name, number, deleteContact } = this.props;\r\n    return (\r\n      <li id={id} className={s.listItem}>\r\n        {name}:{number}\r\n        <button\r\n          onClick={() => {\r\n            deleteContact(id);\r\n          }}\r\n          className={s.buttonListItem}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  id: PropTypes.string,\r\n  deleteContact: PropTypes.func,\r\n};\r\nexport default ContactListItem;\r\n","import { Component } from 'react';\r\nimport ContactListItem from '../ContactListItem';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/contacts/contacts-operations';\r\n\r\nclass ContactList extends Component {\r\n  componentDidMount() {\r\n    this.props.onLoad();\r\n  }\r\n\r\n  render() {\r\n    const { contacts, deleteContact } = this.props;\r\n\r\n    return (\r\n      <ul>\r\n        {contacts.map(({ name, number, id }) => {\r\n          return (\r\n            <ContactListItem\r\n              name={name}\r\n              number={number}\r\n              key={id}\r\n              id={id}\r\n              deleteContact={deleteContact}\r\n              className={s.ContactList}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst getContactsToShow = ({ filter, items }) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return items.filter(({ name }) =>\r\n    name ? name.toLowerCase().includes(normalizedFilter) : false,\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getContactsToShow(state.contacts),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: contactId => dispatch(operations.deleteContact(contactId)),\r\n  onLoad: () => dispatch(operations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { Component } from 'react';\r\nimport { v4 as genId } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/contacts-actions';\r\n\r\nclass Filter extends Component {\r\n  render() {\r\n    const filterInputId = genId();\r\n    const { filterState, filterChange } = this.props;\r\n\r\n    return (\r\n      <label htmlFor={filterInputId} className={s.labelFilter}>\r\n        Search Contacts by Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          id={filterInputId}\r\n          value={filterState}\r\n          onChange={filterChange}\r\n          className={s.inputFilter}\r\n        />\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  filters: PropTypes.string,\r\n  filterChange: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filterState: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  filterChange: event => dispatch(actions.filterChange(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import './App.css';\nimport { Component } from 'react';\nimport ContactForm from './components/ContactForm';\n// import { v4 as genId } from 'uuid';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nclass App extends Component {\n  // state = {\n  //   contacts: [\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //   ],\n  //   filter: '',\n  // };\n\n  // componentDidMount() {\n  //   const parsedContacts = JSON.parse(localStorage.getItem(`contacts`));\n\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // addNewContact = ({ name, number }) => {\n  //   const nameList = this.state.contacts.map(contact => contact.name);\n  //   if (nameList.includes(name)) {\n  //     alert(`${name} already in your contact list`);\n  //     return;\n  //   }\n\n  //   this.setState(prevState => ({\n  //     contacts: [...prevState.contacts, { name, id: genId(), number }],\n  //   }));\n  // };\n\n  // contactsToShow = () => {\n  //   const { filter, contacts } = this.state;\n  //   const normalizedFilter = filter.toLowerCase();\n  //   return contacts.filter(({ name }) => {\n  //     return name ? name.toLowerCase().includes(normalizedFilter) : false;\n  //   });\n  // };\n\n  // deleteContact = contactId => {\n  //   this.setState(prevState => {\n  //     return {\n  //       contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n  //     };\n  //   });\n  // };\n\n  // filterChange = event => {\n  //   this.setState({ filter: event.currentTarget.value });\n  // };\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\n// import types from './contacts-types';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} = actions;\r\n\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.AddContact:\r\n//       if (state.find(contact => contact.name === payload.name)) {\r\n//         alert(`${payload.name} is already in contacts.`);\r\n//         return state;\r\n//       }\r\n//       return [...state, payload];\r\n//     case types.DeleteContact:\r\n//       return state.filter(({ id }) => id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => {\r\n    if (state.find(contact => contact.name === payload.name)) {\r\n      alert(`${payload.name} is already in contacts.`);\r\n      return state;\r\n    }\r\n    return [...state, payload];\r\n  },\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FilterChange:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filterReducer = createReducer('', {\r\n  'contacts/FilterChange': (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n  loading,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\n// const contactsPersistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// const rootReducer = {\r\n//   contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n// };\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// export default { store, persistor };\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}